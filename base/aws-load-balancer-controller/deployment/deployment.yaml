apiVersion: apps/v1
kind: Deployment
metadata:
  name: aws-load-balancer-controller
  labels:
    app.kubernetes.io/name: aws-load-balancer-controller
    app.kubernetes.io/component: controller
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: aws-load-balancer-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aws-load-balancer-controller
        app.kubernetes.io/component: controller
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: aws-load-balancer-controller
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: aws-load-balancer-webhook-tls
      securityContext:
        fsGroup: 65534
      containers:
      - name: controller
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --ingress-class=alb
        - --metrics-bind-addr=:8080
        - --enable-pod-readiness-gate-inject=true
        - --enable-shield=true
        - --enable-waf=true
        - --enable-wafv2=true
        - --log-level=info
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: aws-load-balancer-controller-config
              key: cluster-name
        image: public.ecr.aws/eks/aws-load-balancer-controller:v2.12.0
        imagePullPolicy: IfNotPresent
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
        ports:
        - name: webhook-server
          containerPort: 9443
          protocol: TCP
        - name: metrics-server
          containerPort: 8080
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          failureThreshold: 2
          httpGet:
            path: /healthz
            port: 61779
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          failureThreshold: 2
          httpGet:
            path: /readyz
            port: 61779
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 10
      terminationGracePeriodSeconds: 10
      priorityClassName: system-cluster-critical
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - aws-load-balancer-controller
              topologyKey: kubernetes.io/hostname